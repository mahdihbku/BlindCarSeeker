# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _ec_elgamal
else:
    import _ec_elgamal

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def cdata(ptr, nelements=1):
    return _ec_elgamal.cdata(ptr, nelements)

def memmove(data, indata):
    return _ec_elgamal.memmove(data, indata)

def prepare(pub, priv):
    return _ec_elgamal.prepare(pub, priv)

def prepare_for_enc(pub):
    return _ec_elgamal.prepare_for_enc(pub)

def print_time(start, end):
    return _ec_elgamal.print_time(start, end)

def generate_decrypt_file():
    return _ec_elgamal.generate_decrypt_file()

def load_encryption_file():
    return _ec_elgamal.load_encryption_file()

def score_is_positive(ciphert):
    return _ec_elgamal.score_is_positive(ciphert)

def dec_zero_nonzero(ciphert):
    return _ec_elgamal.dec_zero_nonzero(ciphert)

def generate_keys(pub_filename, priv_filename):
    return _ec_elgamal.generate_keys(pub_filename, priv_filename)

def decrypt_ec(ciphert):
    return _ec_elgamal.decrypt_ec(ciphert)

def encrypt_ec(mess):
    return _ec_elgamal.encrypt_ec(mess)

def add2(ct1, ct2):
    return _ec_elgamal.add2(ct1, ct2)

def add3(ct1, ct2, ct3):
    return _ec_elgamal.add3(ct1, ct2, ct3)

def add4(ct1, ct2, ct3, ct4):
    return _ec_elgamal.add4(ct1, ct2, ct3, ct4)

def mult(scalar, ct1):
    return _ec_elgamal.mult(scalar, ct1)


